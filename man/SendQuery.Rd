% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_query.R
\name{SendQuery}
\alias{SendQuery}
\title{Execute a SQL query with retry mechanism}
\usage{
SendQuery(conn, query, max_retries = 2, retry_delay_seconds = 30)
}
\arguments{
\item{conn}{A database connection object. Typically created using \code{DBI::dbConnect()}.}

\item{query}{A character string representing the SQL query to be executed.}

\item{max_retries}{An integer specifying the maximum number of retry attempts if the query fails. Default is 2.}

\item{retry_delay_seconds}{An integer specifying the delay in seconds between retry attempts. Default is 30.}
}
\value{
A tibble containing the result of the SQL query. Returns \code{NULL} if the query fails after all retry attempts.
}
\description{
\code{SendQuery} function attempts to execute a SQL query on a database connection with a retry mechanism.
If the query fails, it retries up to a specified number of attempts with a delay between each attempt.
}
\details{
\itemize{
\item The function logs the table name extracted from the query, the number of rows returned upon success,
and any errors encountered during the execution.
\item The retry mechanism ensures that transient errors, such as temporary database unavailability, are handled gracefully.
\item The function uses \code{tryCatch()} for error handling and logs warnings for failed attempts.
}
}
\examples{
\dontrun{
  conn <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
  query <- "SELECT * FROM my_table"
  result <- trySQLQuery(conn, query, max_retries = 3, retry_delay = 10)
}

}
